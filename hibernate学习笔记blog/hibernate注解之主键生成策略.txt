hibernate注解之ID主键详解
参考：http://docs.jboss.org/hibernate/annotations/3.4/reference/zh_cn/html_single/
      http://blog.csdn.net/linan0930/article/details/21108411
 使用@Id注解可以将实体bean中的某个属性定义为标识符(identifier). 该属性的值可以通过应用自身进行设置, 也可以通过Hiberante生成(推荐). 使用 @GeneratedValue注解可以定义该标识符的生成策略
 JPA通用策略生成器 
 二、hibernate主键策略生成器 
 三、@GenericGenerator 
 四、通过@GenericGenerator自定义主键生成策略 下面来分别介绍


JPA通用策略生成器 

通过annotation来映射hibernate实体的,基于annotation的hibernate主键标识为@Id, 
 其生成规则由@GeneratedValue设定的.这里的@id和@GeneratedValue都是JPA的标准用法, 
 JPA提供四种标准用法,由@GeneratedValue的源代码可以明显看出. 
 
JPA提供的四种标准用法为TABLE,SEQUENCE,IDENTITY,AUTO. 
TABLE：使用一个特定的数据库表格来保存主键。 
SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 
IDENTITY：主键由数据库自动生成（主要是自动增长型） 
AUTO：主键由程序控制。 


1、TABLE 
 


Java代码  
 
@Id  
 
@GeneratedValue(strategy = GenerationType.TABLE, generator="payablemoney_gen")  
 
@TableGenerator(name = "pk_gen",  
 
    table="tb_generator",  
 
    pkColumnName="gen_name",  
 
    valueColumnName="gen_value",  
 
    pkColumnValue="PAYABLEMOENY_PK",  
 
    allocationSize=1  
 
)  
 

这里应用表tb_generator，定义为 
 


Sql代码  
 
CREATE TABLE  tb_generator (  
 
  id NUMBER NOT NULL,  
 
  gen_name VARCHAR2(255) NOT NULL,  
 
  gen_value NUMBER NOT NULL,  
 
  PRIMARY KEY(id)  
 
)  
 

插入纪录，供生成主键使用， 
 


Sql代码  
 
INSERT INTO tb_generator(id, gen_name, gen_value) VALUES (1,PAYABLEMOENY_PK', 1);  
 

在主键生成后，这条纪录的value值，按allocationSize递增。 
 

@TableGenerator的定义： 
 


Java代码  
 
@Target({TYPE, METHOD, FIELD})   
 
@Retention(RUNTIME)  
 
public @interface TableGenerator {  
 
  String name();  
 
  String table() default "";  
 
  String catalog() default "";  
 
  String schema() default "";  
 
  String pkColumnName() default "";  
 
  String valueColumnName() default "";  
 
  String pkColumnValue() default "";  
 
  int initialValue() default 0;  
 
  int allocationSize() default 50;  
 
  UniqueConstraint[] uniqueConstraints() default {};  
 
}  
 

其中属性说明： 
 name属性表示该表主键生成策略的名称，它被引用在@GeneratedValue中设置的“generator”值中。 
 table属性表示表生成策略所持久化的表名，例如，这里表使用的是数据库中的“tb_generator”。 
 catalog属性和schema具体指定表所在的目录名或是数据库名。 
 pkColumnName属性的值表示在持久化表中，该主键生成策略所对应键值的名称。例如在“tb_generator”中将“gen_name”作为主键的键值 
 valueColumnName属性的值表示在持久化表中，该主键当前所生成的值，它的值将会随着每次创建累加。例如，在“tb_generator”中将“gen_value”作为主键的值 
 pkColumnValue属性的值表示在持久化表中，该生成策略所对应的主键。例如在“tb_generator”表中，将“gen_name”的值为“CUSTOMER_PK”。 
 initialValue表示主键初识值，默认为0。 
 allocationSize表示每次主键值增加的大小，例如设置成1，则表示每次创建新记录后自动加1，默认为50。 
 UniqueConstraint与@Table标记中的用法类似。 
 
2、SEQUENCE 
 


Java代码  
 
@Id  
 
@GeneratedValue(strategy = GenerationType.SEQUENCE,generator="payablemoney_seq")  
 
@SequenceGenerator(name="payablemoney_seq", sequenceName="seq_payment")  
 
@SequenceGenerator定义 
 


Java代码  
 
@Target({TYPE, METHOD, FIELD})   
 
@Retention(RUNTIME)  
 
public @interface SequenceGenerator {  
 
 String name();  
 
 String sequenceName() default "";  
 
 int initialValue() default 0;  
 
 int allocationSize() default 50;  
 
}  
 

name属性表示该表主键生成策略的名称，它被引用在@GeneratedValue中设置的“generator”值中。 
 sequenceName属性表示生成策略用到的数据库序列名称。 
 initialValue表示主键初识值，默认为0。 
 allocationSize表示每次主键值增加的大小，例如设置成1，则表示每次创建新记录后自动加1，默认为50。 
 

3、IDENTITY 
 


Java代码  
 
@Id  
 
@GeneratedValue(strategy = GenerationType.IDENTITY)  
 
4、AUTO 
 


Java代码  
 
@Id  
 
@GeneratedValue(strategy = GenerationType.AUTO)  
 
在指定主键时，如果不指定主键生成策略，默认为AUTO。 
 


Java代码  
 
@Id  
 @GeneratedValue
 
跟下面的定义是一样的。 
 


Java代码  
 
@Id  
 
@GeneratedValue(strategy = GenerationType.AUTO)  
  

